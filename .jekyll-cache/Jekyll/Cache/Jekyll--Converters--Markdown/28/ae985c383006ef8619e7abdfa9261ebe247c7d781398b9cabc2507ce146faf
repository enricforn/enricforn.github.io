I"<h3 id="how-to-connect-to-tfs-or-visual-studio-online-through-api-and-get-workitemstore-service-brief-description-of-encountered-issues-and-how-to-solve-them">How to connect to TFS or Visual Studio online through API and get WorkItemStore service. Brief description of encountered issues and how to solve them.</h3>

<p>In this post, I detail how you can access to Team Foundation Server 2013 (on premise) through its API. Once we can connect to the server, we will get an instance of a TFS service, in this example we will access to WorkItemStore, and we’ll get a list of all existing user stories in a team project. I suppouse you are familiar to <a href="https://www.visualstudio.com/en-us/products/tfs-overview-vs.aspx">TFS</a>, and you are used to work with <a href="https://msdn.microsoft.com/en-us/library/hh409275.aspx">WorkItems</a>) and <a href="https://msdn.microsoft.com/en-us/library/bb130306.c#">WIQL</a>.
Ok, let’s start with a sample c# console application called TFSUserStoriesConsole. Open your Visual Studio and create a new Visual C# Console Application (File -&gt; New -&gt; Project -&gt; Visual C#). Then we create a class which manage connection to TFS, and get the instance of WorkItemStore object. WorkItemStore let you to get workitems from TFS. Let me show you a piece of code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     teamProjectCollection = new TfsTeamProjectCollection(tfsUri, myCredentials);

     teamProjectCollection.EnsureAuthenticated();

     workItemStore = teamProjectCollection.GetService&lt;WorkItemStore&gt;();
</code></pre></div></div>

<p>We connect to TFS, ensure we are connected to it, and finally we get the instance of WorkItemStore. It’s strange because workItemStore equals null and I don’t get more information about it.</p>

<p>The way I’ve found to get more information about this null, is create a new instance of WorkItemStore:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     WorkItemStore workItemStore = new WorkItemStore(teamProjectCollection);
</code></pre></div></div>

<p>In my case seems that I missed some assemblies to reference:</p>

<p>Type: System.IO.FileNotFoundException
Message: Could not load file or assembly ‘Microsoft.TeamFoundation.WorkItemTracking.Proxy, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a’ or one of its dependencies. The system cannot find the file specified.
Source: Microsoft.TeamFoundation.WorkItemTracking.Client
StackTrace:    at Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore.InitializeInternal()
   at Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore.Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection teamProjectCollection)
   at Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.InitializeTeamFoundationObject(String fullName, Object instance)
   at Microsoft.TeamFoundation.Client.TfsConnection.CreateServiceInstance(Assembly assembly, String fullName)
   at Microsoft.TeamFoundation.Client.TfsConnection.GetServiceInstance(Type serviceType, Object serviceInstance)
   at Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.GetServiceInstance(Type serviceType, Object serviceInstance)
   at Microsoft.TeamFoundation.Client.TfsConnection.GetService(Type serviceType)
   at Microsoft.TeamFoundation.Client.TfsConnection.GetService<a href="">T</a></p>

<p>Ok, much easier getting a stacktrace to solve the problem. I added that reference, but I get another error:</p>

<p>Message: Error HRESULT E_FAIL has been returned from a call to a COM component.
Source: Microsoft.TeamFoundation.WorkItemTracking.Client.DataStoreLoader
StackTrace:    at Microsoft.TeamFoundation.WorkItemTracking.Client.DataStore.DataStoreNative.UpdateMetadata(IntPtr handle, Object rowset, String dbstamp, UInt32&amp; changes)
   at Microsoft.TeamFoundation.WorkItemTracking.Client.DataStore.Datastore.UpdateMetadata(Object rowset, String dbstamp)
   at Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore.EndBackendCall(BackendCallData data)
   at Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore.RefreshCacheInternal(BackendCallData&amp; data)
   at Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore.InitializeInternal()
   at Microsoft.TeamFoundation.WorkItemTracking.Client.WorkItemStore.Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection teamProjectCollection)
   at Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.InitializeTeamFoundationObject(String fullName, Object instance)
   at Microsoft.TeamFoundation.Client.TfsConnection.CreateServiceInstance(Assembly assembly, String fullName)
   at Microsoft.TeamFoundation.Client.TfsConnection.GetServiceInstance(Type serviceType, Object serviceInstance)
   at Microsoft.TeamFoundation.Client.TfsTeamProjectCollection.GetServiceInstance(Type serviceType, Object serviceInstance)
   at Microsoft.TeamFoundation.Client.TfsConnection.GetService(Type serviceType)
   at Microsoft.TeamFoundation.Client.TfsConnection.GetService<a href="">T</a></p>

<p>In this case I monitor the process with <a href="https://technet.microsoft.com/en-us/sysinternals/bb896645">FileMon</a> and the process ends with an access denied to folder   C:\ProgramData\Microsoft Team Foundation\4.0\Cache</p>

<p>Once I gave write permissions to C:\ProgramData\Microsoft Team Foundation\4.0\Cache the application runs properly.</p>

<p>You can find this errors when you install it to a server which is not TFS data tier and without Visual Studio installed either.</p>

<p>Sample code can be found at <a href="https://github.com/enricforn/sampleapplications/tree/master/csharp/TFSUserStoriesConsole">Github</a>.</p>

<p>Hope it helps and you save time to solve this problems.</p>
:ET